# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Stations

import flatbuffers

class Features(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFeatures(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Features()
        x.Init(buf, n + offset)
        return x

    # Features
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Features
    def Geometry(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Geometry import Geometry
            obj = Geometry()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Features
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Features
    def Properties(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Properties import Properties
            obj = Properties()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def FeaturesStart(builder): builder.StartObject(3)
def FeaturesAddGeometry(builder, geometry): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(geometry), 0)
def FeaturesAddType(builder, type): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)
def FeaturesAddProperties(builder, properties): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(properties), 0)
def FeaturesEnd(builder): return builder.EndObject()
